---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import Card from '~/components/Card.astro';
import Container from '~/components/Container.astro';

const allDemos = await getCollection("demos")

const grouped = allDemos.reduce((acc, demo) => {
  const category = demo.data.category;
  if (!acc[category]) acc[category] = [];
  acc[category].push(demo);
  return acc;
}, {} as Record<string, typeof allDemos>);

for (const category in grouped) {
  grouped[category] = grouped[category]
    .sort((a, b) => {
      const dateA = new Date(a.data.date ?? 0);
      const dateB = new Date(b.data.date ?? 0);
      return dateB.getTime() - dateA.getTime();
    })
    .slice(0, 4);
}
---

<BaseLayout>
	 <Container>
		<div class="flex flex-col gap-32 pt-24">
			<div class="flex flex-col items-center text-center gap-2">
				<h1 class="font-display sm:text-[56px] text-4xl">Web <span class="italic">Animations</span></h1>
				<p class="text-fg-muted max-w-80 text-sm sm:text-base">
					Simple web animation examples to learn and explore popular libraries.
				</p>
			</div>
			<div class="flex flex-col gap-12 px-4">
				{Object.entries(grouped).map(([category, demos]) => (
					<section class="flex flex-col gap-2">
						<div class="flex w-full justify-between items-center">
							<h2 class="font-medium">{category.toUpperCase()}</h2>
							<a href={`/${category}`} class="text-sm text-fg-muted">View all</a>
						</div>
						<div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
							{demos.map(demo => (
								<Card title={demo.data.title} slug={demo.slug} colors={demo.data.colors} />
							))}
						</div>
					</section>
				))}
			</div>
		</div>
	 </Container>
</BaseLayout>
